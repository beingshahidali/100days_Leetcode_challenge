Given an integer array nums that may contain duplicates, return all possible
subsets
(the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:

Input: nums = [0]
Output: [[],[0]]

____________________________Solution____________________________
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        ans.push_back(vector<int>());
        int start = 0, end = 0;

        for(int i = 0;i<nums.size();i++){
            start = 0;

            if(i>0 && nums[i] == nums[i-1]) {
                start = end+1;
            }
            end = ans.size()-1;
            for(int j = start ; j<=end;j++){
                vector<int> temp(ans[j]);
                temp.push_back(nums[i]);
                ans.push_back(temp);
            }
        }
        return ans;
    }
};