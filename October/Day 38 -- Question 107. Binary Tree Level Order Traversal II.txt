Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []
__________________________Solution_______________________________
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> ans;
        if(!root) return ans;
        queue<TreeNode*> q;
        q.push(root);
        ans.push_back({root->val});
        while(q.size()){            
            int n = q.size();
            vector<int> temp;
            for(int i = 0;i<n;i++){
                TreeNode *front = q.front(); q.pop();
                if(front->left){
                    q.push(front->left); temp.push_back(front->left->val);
                }
                if(front->right){
                    q.push(front->right); temp.push_back(front->right->val);
                }
            }
            if(temp.size()) ans.push_back(temp);
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};