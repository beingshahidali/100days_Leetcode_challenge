Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: 2

Example 2:

Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5

___________________________Solution________________________________

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        if(!root->left && !root->right) return 1;
        int level = 1;
        queue<TreeNode*> q;
        q.push(root);
        while(q.size()){
            int n = q.size();
            for(int i = 0;i<n;i++){
                TreeNode *front = q.front(); q.pop();
                if(!front->left && !front->right) return level;
                if(front->left) q.push(front->left);
                if(front->right) q.push(front->right);
            }
            level++;          
            
        }
        return level;
    }
};

// int minDepth(TreeNode* root) {
//         if(!root) return 0;
//         if(!root->left && !root->right) return 1;
//         int level = 1;
//         queue<pair<TreeNode*,int>> q;
//         q.push({root,1});
//         while(q.size()){
//             int n = q.size();
//             for(int i = 0;i<n;i++){
//                 auto it = q.front();  q.pop();
//                 TreeNode *front = it.first;
//                 int lvl = it.second;
//                 if(!front->left && !front->right) return lvl;
//                 lvl++;
//                 if(front->left) q.push({front->left,lvl});
//                 if(front->right) q.push({front->right,lvl});
//             }
//             level++;          
            
//         }
//         return -1;
//     }