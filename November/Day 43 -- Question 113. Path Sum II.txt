Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

 

Example 1:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

Example 2:

Input: root = [1,2,3], targetSum = 5
Output: []

Example 3:

Input: root = [1,2], targetSum = 0
Output: []

______________________________Solution_____________________________
class Solution {
public:

    void helper(TreeNode *root,vector<vector<int>> &ans,vector<int> temp,int targetSum ){
        if(!root) return;
        temp.push_back(root->val);
        if(root->val == targetSum && !root->left && !root->right){
            ans.push_back(temp);
        }
        helper(root->left, ans,temp,targetSum-root->val);
        helper(root->right, ans,temp,targetSum-root->val);
        
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> ans;
        vector<int> temp;
         helper(root, ans,temp,targetSum);
        return ans;
    }
};