You are given the head of a linked list.

Remove every node which has a node with a greater value anywhere to the right side of it.

Return the head of the modified linked list.

 

Example 1:

Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.

Example 2:

Input: head = [1,1,1,1]
Output: [1,1,1,1]
Explanation: Every node has value 1, so no nodes are removed.

____________________________Solution_______________________________
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseNode(ListNode *root){
        ListNode *current = root, *prev = NULL;
        while(current){
            ListNode *next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
    ListNode* removeNodes(ListNode* head) {
       
        ListNode *ans = NULL;
        head = reverseNode(head);
        int val  = head->val;
        ListNode *newNode = new ListNode(val);
        newNode->next = ans;
        ans = newNode;
        head = head->next;

        while(head){
            if(head->val >=val){
                val = head->val;
                ListNode *newNode = new ListNode(val);
                newNode->next = ans;
                ans = newNode;
            }
            head = head->next;            
        }
        return ans;
        


    }
};