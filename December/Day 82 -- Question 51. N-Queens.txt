The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:

Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:

Input: n = 1
Output: [["Q"]]

____________________________Solution_______________________________
class Solution {
public:
   vector<vector<string>> ans;

bool isSafeToPlace(bool** visited, int row, int col, int n) {
    int r, c;

    // Vertical
    r = row - 1, c = col;
    while (r >= 0) {
        if (visited[r][c]) return false;
        r--;
    }

    // Horizontal
    r = row, c = col - 1;
    while (c >= 0) {
        if (visited[r][c]) return false;
        c--;
    }

    // Cross left
    r = row - 1, c = col - 1;
    while (r >= 0 && c >= 0) {
        if (visited[r][c]) return false;
        r--;
        c--;
    }

    // Cross right
    r = row - 1, c = col + 1;
    while (r >= 0 && c < n) {
        if (visited[r][c]) return false;
        r--;
        c++;
    }

    return true;
}

void helper(bool** visited, int row, int col, int tqps, int n, vector<string>& current) {
    if (tqps == n) {
        ans.push_back(current);
        return;
    }

    if (col == n) {
        row++;
        col = 0;
    }

    if (row == n) {
        return;
    }

    if (isSafeToPlace(visited, row, col, n)) {
        visited[row][col] = true;
        current[row][col] = 'Q';
        helper(visited, row + 1, 0, tqps + 1, n, current);
        visited[row][col] = false;
        current[row][col] = '.';
    }

    helper(visited, row, col + 1, tqps, n, current);
}

vector<vector<string>> solveNQueens(int n) {
    ans.clear();
    bool** visited = new bool*[n];
    for (int i = 0; i < n; ++i) {
        visited[i] = new bool[n]();
    }
    vector<string> current(n, string(n, '.'));

    helper(visited, 0, 0, 0, n, current);

    for (int i = 0; i < n; ++i) {
        delete[] visited[i];
    }
    delete[] visited;

    return ans;
}
};