Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

    0 <= a, b, c, d < n
    a, b, c, and d are distinct.
    nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]

____________________________Solution_______________________________
class Solution {
public:
   vector<vector<int>> fourSum(vector<int>& nums, int target) {
    int n = nums.size();
    sort(nums.begin(), nums.end());
    vector<vector<int>> result;

    for (int i = 0; i < n - 3; ++i) {
        for (int j = i + 1; j < n - 2; ++j) {
            int start = j + 1, end = n - 1;

            while (start < end) {
long long sum = static_cast<long long>(nums[i]) + nums[j] + nums[start] + nums[end];
                if (sum == target) {
                    result.push_back({nums[i], nums[j], nums[start], nums[end]});
                    
                    while (start < end && nums[start] == nums[start + 1]) {
                        ++start;
                    }
                    while (start < end && nums[end] == nums[end - 1]) {
                        --end;
                    }
                    ++start;
                    --end;
                } else if (sum < target) {
                    ++start;
                } else {
                    --end;
                }
            }

            while (j < n - 2 && nums[j] == nums[j + 1]) {
                ++j;
            }
        }

        while (i < n - 3 && nums[i] == nums[i + 1]) {
            ++i;
        }
    }

    return result;
}

};