You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:

Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]

Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]

Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]

_____________________________Solution______________________________
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseNode(ListNode *root){
        
        ListNode *current = root,*prev= NULL;
        while(current){
            ListNode *next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode *temp = NULL;
        l1 = reverseNode(l1);
        l2 = reverseNode(l2);
        int carry = 0;
        while(l1 ||l2||carry){
            if(l1){carry+= l1->val; l1=l1->next;}
            if(l2){carry+= l2->val; l2=l2->next;}
            ListNode *newNode = new ListNode(carry%10);
            newNode->next = temp;
            temp = newNode;
            carry/=10;
        }
        return temp;
    }
};