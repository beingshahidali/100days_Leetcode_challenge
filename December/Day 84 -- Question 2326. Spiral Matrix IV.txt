You are given two integers m and n, which represent the dimensions of a matrix.

You are also given the head of a linked list of integers.

Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.

Return the generated matrix.

 

Example 1:

Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.

Example 2:

Input: m = 1, n = 4, head = [0,1,2]
Output: [[0,1,2,-1]]
Explanation: The diagram above shows how the values are printed from left to right in the matrix.
The last space in the matrix is set to -1.

____________________________Solution______________________________
class Solution {
	public:
		vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {
			vector<vector<int>> mat(m,vector<int>(n,-1));
			ListNode* curr=head;
			int top=0;
			int left=0;
			int bottom=m-1;
			int right=n-1;
			while(curr!=NULL){
				for(int j=left;j<=right && curr!=NULL;j++){
					mat[top][j]=curr->val;
					curr=curr->next;
				}
				top++;
				for(int i=top;i<=bottom && curr!=NULL;i++){
					mat[i][right]=curr->val;
					curr=curr->next;
				}
				right--;
				for(int j=right;j>=left && curr!=NULL;j--){
					mat[bottom][j]=curr->val;
					curr=curr->next;
				}
				bottom--;
				for(int i=bottom;i>=top && curr!=NULL;i--){
					mat[i][left]=curr->val;
					curr=curr->next;
				}
				left++;
			}
			return mat;
		}
	};