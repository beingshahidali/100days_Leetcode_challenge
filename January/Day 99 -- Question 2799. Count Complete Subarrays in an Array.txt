You are given an array nums consisting of positive integers.

We call a subarray of an array complete if the following condition is satisfied:

    The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.

Return the number of complete subarrays.

A subarray is a contiguous non-empty part of an array.

 

Example 1:

Input: nums = [1,3,1,2,2]
Output: 4
Explanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].

Example 2:

Input: nums = [5,5,5,5]
Output: 10
Explanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.

 ______________________________Solution_____________________________
class Solution {
public:
    int countCompleteSubarrays(vector<int>& nums) {
        unordered_set<int> s(nums.begin(), nums.end());
        int unique = s.size();
        int n = nums.size();
        int count = 0;
        vector<unordered_set<int>> ans;

        for(int i = 0 ;i<n;i++){
            unordered_set<int> temp;
            for(int j = i ;j<n;j++){
                temp.insert(nums[j]);
                if(temp.size()== unique)count++;
            }
        }
        return count;

    }
};